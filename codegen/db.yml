alpaca:
  id: alpaca
  name: Alpaca
  system:
    schema: "{system}"
    message: "Below is an instruction that describes a task. Write a response that appropriately completes the request."
  user: "### Instruction:\n{prompt}"
  assistant: "### Response:"
  linebreaks:
    system: 2
    user: 2
chatml:
  id: "chatml"
  name: "ChatMl"
  system:
    schema: "<|im_start|>system\n{system}<|im_end|>"
  user: "<|im_start|>user\n{prompt}<|im_end|>"
  assistant: "<|im_start|>assistant"
  linebreaks:
    system: 1
    user: 1
    assistant: 1
  stop:
    - "<|im_end|>"
  afterShot: " <|im_end|>\n"
chatml-tools:
  id: "chatml"
  name: "ChatMl"
  system:
    schema: "<|im_start|>system\n{system}<|im_end|>"
    message: 'You are a helpful assistant with tool calling capabilities. You may call one or more functions to assist with the user query.\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>\n{tools}\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{"name": <function-name>, "arguments": <args-json-object>}\n</tool_call>'
  user: "<|im_start|>user\n{prompt}<|im_end|>"
  assistant: "<|im_start|>assistant"
  linebreaks:
    system: 1
    user: 1
    assistant: 1
  stop:
    - "<|im_end|>"
  afterShot: " <|im_end|>\n"
  tools:
    def: "{system}"
    call: "<tool_call>\n{tool}\n</tool_call>"
    response: "<|im_start|>user\n<tool_response>\n{tools_response}\n</tool_response><|im_end|>\n"
codestral:
  id: codestral
  name: Codestral
  user: "[INST] {prompt}"
  assistant: " [/INST]"
  stop:
    - "</s>"
  afterShot: "\n"
  linebreaks:
    system: 2
  system:
    schema: "<<SYS>>\n{system}\n<</SYS>>"
command-r:
  id: command-r
  name: Command-R
  user: "<|START_OF_TURN_TOKEN|><|USER_TOKEN|>{prompt}<|END_OF_TURN_TOKEN|>"
  assistant: "<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>"
  prefix: "<BOS_TOKEN>"
  stop:
    - "<|END_OF_TURN_TOKEN|>"
  linebreaks:
    user: 1
  system:
    schema: "<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>{system}<|END_OF_TURN_TOKEN|>"
deepseek:
  id: deepseek
  name: Deepseek
  system:
    schema: "{system}"
    message: "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer."
  afterShot: "\n"
  user: "### Instruction:\n{prompt}"
  assistant: "### Response:"
  linebreaks:
    user: 1
    system: 1
  stop:
    - "<|EOT|>"
    - "### Instruction:"
deepseek2:
  id: deepseek2
  name: Deepseek 2
  system:
    schema: "<｜begin▁of▁sentence｜>{system}"
  user: "User: {prompt}"
  assistant: "Assistant:"
  linebreaks:
    user: 2
    system: 2
  stop:
    - "<｜end▁of▁sentence｜>"
    - "<｜tool▁calls▁end｜>"
deepseek3:
  id: deepseek3
  name: Deepseek 3
  system:
    schema: "<｜begin▁of▁sentence｜>{system}"
  user: "<｜User｜>{prompt}"
  assistant: "<｜Assistant｜>"
  linebreaks:
    user: 2
    system: 2
  stop:
    - "<｜end▁of▁sentence｜>"
    - "<｜tool▁calls▁end｜>"
  afterShot: "<｜end▁of▁sentence｜>"
gemma:
  id: gemma
  name: Gemma
  user: "<start_of_turn>user\n{prompt}"
  assistant: "<end_of_turn>\n<start_of_turn>model"
  stop:
    - "<end_of_turn>"
  afterShot: "\n"
granite:
  id: granite
  name: Granite
  user: "<|start_of_role|>user<|end_of_role|>{prompt}<|end_of_text|>"
  assistant: "<|start_of_role|>assistant<|end_of_role|>"
  stop:
    - "<|end_of_text|>"
    - "<|start_of_role|>"
  system:
    schema: "<|start_of_role|>system<|end_of_role|>{system}<|end_of_text|>"
    message: "You are Granite, developed by IBM. You are a helpful AI assistant."
  linebreaks:
    user: 1
    system: 1
  afterShot: "<|end_of_text|>\n"
granite-think:
  id: granite-think
  name: Granite think
  user: "<|start_of_role|>user<|end_of_role|>{prompt}<|end_of_text|>"
  assistant: "<|start_of_role|>assistant<|end_of_role|>"
  stop:
    - "<|end_of_text|>"
    - "<|start_of_role|>"
  system:
    schema: "<|start_of_role|>system<|end_of_role|>{system}<|end_of_text|>"
    message: "You are Granite, developed by IBM. You are a helpful AI assistant. Respond to every user query in a comprehensive and detailed way. You can write down your thoughts and reasoning process before responding. In the thought process, engage in a comprehensive cycle of analysis, summarization, exploration, reassessment, reflection, backtracing, and iteration to develop well-considered thinking process. In the response section, based on various attempts, explorations, and reflections from the thoughts section, systematically present the final solution that you deem correct. The response should summarize the thought process. Write your thoughts after 'Here is my thought process:' and write your response after 'Here is my response:' for each user query."
  linebreaks:
    user: 1
    system: 1
  afterShot: "<|end_of_text|>\n"
granite-tools:
  id: granite-tools
  name: Granite tools
  user: "<|start_of_role|>user<|end_of_role|>{prompt}<|end_of_text|>"
  assistant: "<|start_of_role|>assistant<|end_of_role|>"
  stop:
    - "<|end_of_text|>"
    - "<|start_of_role|>"
  system:
    schema: "<|start_of_role|>system<|end_of_role|>{system}<|end_of_text|>"
    message: "You are Granite, developed by IBM. You are a helpful AI assistant with access to the following tools. When a tool is required to answer the user's query, respond with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request."
  tools:
    def: "<|start_of_role|>tools<|end_of_role|>{tools}<|end_of_text|>"
    call: "<|tool_call|>{tool}"
    response: "<|start_of_role|>tool_response<|end_of_role|>{tools_response}<|end_of_text|>\n"
  linebreaks:
    user: 1
    system: 1
    tools: 1
  afterShot: "<|end_of_text|>\n"
llama:
  id: llama
  name: Llama
  system:
    schema: "[INST] <<SYS>>\n{system}\n<</SYS>>"
    message: "You are a helpful, respectful and honest assistant. Always answer as helpfully as possible\n\nIf a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information."
  user: "{prompt}"
  assistant: " [/INST] "
  linebreaks:
    system: 2
    user: 0
  prefix: "<s>"
  stop:
    - "</s>"
llama3:
  id: llama3
  name: Llama 3
  user: "<|start_header_id|>user<|end_header_id|>\n\n{prompt}<|eot_id|>"
  assistant: "<|start_header_id|>assistant<|end_header_id|>"
  stop:
    - "<|eot_id|>"
    - "<|end_of_text|>"
  afterShot: "<|eot_id|>\n\n"
  system:
    schema: "<|start_header_id|>system<|end_header_id|>\n\n{system}<|eot_id|>"
llava:
  id: llava
  name: Llava
  user: "USER: {prompt}"
  assistant: "ASSISTANT:"
  linebreaks:
    user: 1
minichat:
  id: minichat
  name: Minichat
  user: "[|User|] {prompt} </s>"
  assistant: "[|Assistant|]"
  stop:
    - "</s>"
    - "[|User|]"
  afterShot: "\n"
  prefix: "<s> "
mistral:
  id: mistral
  name: Mistral
  user: "[INST] {prompt}"
  assistant: " [/INST]"
  stop:
    - "</s>"
  afterShot: "\n"
mistral-system:
  id: mistral-system
  name: Mistral system
  user: "[INST]{prompt}"
  assistant: "[/INST]"
  system:
    schema: "[SYSTEM_PROMPT]{system_prompt}[/SYSTEM_PROMPT]"
  stop:
    - "</s>"
  afterShot: "\n"
mistral-system-tools:
  id: mistral-system
  name: Mistral system
  user: "[INST]{prompt}[/INST]"
  assistant: ""
  system:
    schema: "[SYSTEM_PROMPT]{system_prompt}[/SYSTEM_PROMPT]"
  stop:
    - "</s>"
  afterShot: "\n"
  tools:
    def: "[AVAILABLE_TOOLS]{tools}[/AVAILABLE_TOOLS]"
    call: "[TOOL_CALLS] [{tool}]</s>"
    response: "[TOOL_RESULTS]{tools_response}[/TOOL_RESULTS]"
nemotron:
  id: nemotron
  name: Nemotron
  user: "<extra_id_1>User\n{prompt}"
  assistant: "<extra_id_1>Assistant"
  linebreaks:
    system: 2
    user: 1
  system:
    schema: "<extra_id_0>System\n{system}"
  afterShot: "\n\n"
none:
  id: none
  name: No template
  user: "{prompt}"
  assistant: ""
openchat:
  id: openchat
  name: OpenChat
  user: "GPT4 User: {prompt}<|end_of_turn|>"
  assistant: "GPT4 Assistant:"
  stop:
    - "<|end_of_turn|>"
openchat-correct:
  id: openchat-correct
  name: OpenChat correct
  user: "GPT4 Correct User: {prompt}<|end_of_turn|>"
  assistant: "GPT4 Correct Assistant:"
  stop:
    - "<|end_of_turn|>"
orca:
  id: orca
  name: Orca
  system:
    schema: "### System:\n{system}"
    message: "You are an AI assistant that follows instruction extremely well. Help as much as you can."
  user: "### User:\n{prompt}"
  assistant: "### Response:"
  linebreaks:
    system: 2
    user: 2
phi3:
  id: phi3
  name: Phi 3
  user: "<|user|> {prompt}<|end|>"
  assistant: "<|assistant|>"
  system:
    schema: "<|system|> {system}<|end|>"
  afterShot: "<|end|>\n"
  stop:
    - "<|end|>"
    - "<|user|>"
phi4:
  id: phi4
  name: Phi 4
  system:
    schema: "<|im_start|>system<|im_sep|>{system}<|im_end|>"
  user: "<|im_start|>user<|im_sep|>{prompt}<|im_end|>"
  assistant: "<|im_start|>assistant<|im_sep|>"
  stop:
    - "<|im_end|>"
    - "<|im_sep|>"
  afterShot: "<|im_end|>\n"
vicuna:
  id: vicuna
  name: Vicuna
  user: "USER: {prompt}"
  assistant: "### ASSISTANT:"
  linebreaks:
    user: 2
vicuna_system:
  id: vicuna_system
  name: Vicuna system
  system:
    schema: "SYSTEM: {system}"
  user: "USER: {prompt}"
  assistant: "### ASSISTANT:"
  linebreaks:
    system: 2
    user: 2
wizard_vicuna:
  id: wizard_vicuna
  name: Wizard Vicuna
  user: "### Human:\n{prompt}"
  assistant: "### ASSISTANT:"
  linebreaks:
    user: 2
  stop:
    - "<|endoftext|>"
wizardlm:
  id: wizardlm
  name: WizardLM
  system:
    schema: "{system}"
    message: "You are a helpful AI assistant."
  user: "USER: {prompt}"
  assistant: "ASSISTANT:"
  linebreaks:
    user: 1
zephyr:
  id: zephyr
  name: Zephyr
  system:
    schema: "<|system|>\n{system}<|endoftext|>"
  user: "<|user|>\n{prompt}<|endoftext|>"
  assistant: "<|assistant|>"
  linebreaks:
    system: 1
    user: 1
    assistant: 1
  afterShot: "\n"
  stop:
    - "<|endoftext|>"
